#!/bin/env python3

import sys
import json

with open(sys.argv[1], 'r') as file:
    data = json.load(file)


script = """
#!/bin/bash

# autogenerated script, do not edit
set -e

# workdir
W=/tmp/artipie-bench


CMD=$1
NAME=$2

REF=$3
if [[ -z $REF ]]; then
    REF=master
fi
""".format(names=", ".join(data.keys()))

for name in data:
    script += """
    function _{name}_clone {{
        git clone {repo} $W/{name}
    }}

    function _{name}_name {{
        echo -ne "{name}"
    }}

    function _{name}_build {{
        mvn install -f $W/{name} -DskipTests
        mvn package -f $W/{name}/{bench}
    }}
    """.format(name=name, repo=data[name]['repo'], bench=data[name]['benchmarks']['path'])

    prepare = """
    function _{name}_prepare {{
    """.format(name=name)

    run = """
    function _{name}_run {{
        mkdir -p out/{name}
    """.format(name=name)

    cnt = 1
    for case in data[name]['benchmarks']['cases']:
        tar = "$W/_{name}_case{cnt}.tar.gz".format(name=name, cnt=cnt)
        prepare += """
            mkdir -p $W/_{name}_case{cnt}
            if [ -f {tar} ]; then
                hashed=$(md5sum {tar} | grep -o '^[^ ]*')
                hdr=$(curl -I {url} | grep -i Etag | grep -o ' ".*"' | grep -o '[^"]*')
                if [ $hdr == $hashed ]; then
                    echo "Data `{tar}` already exists with correct md5sum. It is not necessary to download with curl again."
                else
                    curl {url} > {tar}
                    tar -xvzf $W/_{name}_case{cnt}.tar.gz -C $W/_{name}_case{cnt}
                fi
            else
                curl {url} > {tar}
                tar -xvzf $W/_{name}_case{cnt}.tar.gz -C $W/_{name}_case{cnt}
            fi
        """.format(url=case['data'], name=name, cnt=cnt, tar=tar)
        cp = "$W/{name}/{bench}/target/".format(name=name, bench=data[name]['benchmarks']['path'])
        run += """
            echo "running {name} - {case}"
            env BENCH_DIR=$W/_{name}_case{cnt}/{tar_path} java \\
                -cp "{cp}benchmarks.jar:{cp}classes/*:{cp}dependency/*" \\
                {cls} {args} > out/{name}/{out}
        """.format(name=name,
                case=case['name'], cp=cp, cls=case['class'], args=" ".join(case['args']),
                out=case['output'], cnt=cnt, tar_path=case['path-in-tar'])
        cnt += 1
    prepare += """
    }
    """
    run += """
    }
    """
    script += prepare
    script += run

script += """
function clean {
    rm -fr $W/${NAME}
}

function clone {
    _${NAME}_clone
}

function prepare {
    _${NAME}_prepare
}

function build {
    _${NAME}_build
}

function run {
    _${NAME}_run
}

${CMD} ${NAME}
"""
print(script)
